<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGuard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_change(Children, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speedMax = 3.5;
path = -10003042354;
state = "returning";
lastX = x;
lastY = y;
grid = -1;
pathFindGrace = 30;
pathPos = 0;

alarm[0] = 1;
dir = 0;
speedTurn = 4;

aniCounter = 0;

pioneer = instance_create(x,y,Pioneer);
pioneer.speedMax = speedMax;


alarm[2] = random(30);

emitter = audio_emitter_create();
soundWalk = audio_play_sound_on(emitter, sFootstep, 1, 0);
soundRun = audio_play_sound_on(emitter, sFootstepRun, 1, 0);
audio_pause_sound(soundWalk);
audio_pause_sound(soundRun);
audio_emitter_falloff(emitter, 25, 100, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_free(emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_resume_sound(soundWalk);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = noone;
state = "returning";
if (audio_exists(soundRun)){
    audio_pause_sound(soundRun);
    audio_resume_sound(soundWalk);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (place_meeting(x, y, Obstacle)){
    x += random_range(100, -100);
    y += random_range(100, -100);
    xstart = x;
    ystart = y;
    alarm[0] = 1;
    exit;
}

if (path != -10003042354)
    exit;

grid = mp_grid_create(0, 0, room_width / 22, room_height / 22, 22, 22);
mp_grid_add_instances(grid, Obstacle, false); 
mp_grid_add_instances(grid, Spawn, false); 
path = path_add();
pathRepeat = path_add();
pathRepeat2 = path_add();

xx = Obstacle.x;
yy = Obstacle.y;
while(instance_place(xx,yy, Obstacle)){
    xx = x+ random_range(-300, 300);
    yy = y+random_range(-300, 300);
}

//effect_create_above(ef_spark, x, y, 1,c_black);


if (!mp_grid_path(grid, path, x, y, xx, yy, 1)){
    alarm[0] = 1;
    alarm[1] = 1;
    path_delete(path);
    path = -10003042354;
    pathFindGrace--;
    if (pathFindGrace &lt; 0)
        instance_destroy();
}
else
{
    xx2 = Obstacle.x;
    yy2 = Obstacle.y;
    while(instance_place(xx2,yy2, Obstacle) || abs(xx2)+abs(yy2) &lt; 50){
        xx2 = x + random_range(-100, 100);
        yy2 = y + random_range(-100, 100);
    }

    mp_grid_path(grid, pathRepeat, xx, yy,x, y,  1)
    path_append(path, pathRepeat);
    path_set_kind(path, 1);
    if (path_get_length(path) &lt; 200){
        alarm[0] = 1;
        alarm[1] = 1;
        path_delete(path);
        path = -10003042354;
        exit;
    }
    pioneer.path = path;
    with(pioneer) path_start(path, speedMax/3, path_action_restart, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_position(emitter, x, y, 0);

if (place_meeting(xstart, ystart, Obstacle)){
    xstart = x;
    ystart = y;
}

//direction = point_direction(xprevious, yprevious, x, y);
angleDif = angle_difference(dir, direction);
if (abs(angleDif) &lt; speedTurn)
    dir = direction;
else if (angleDif &lt; 0)
    dir += speedTurn;
else
    dir -= speedTurn



switch (state){
    case "patrolling":
        if (path_exists(path))
            image_speed = 0.3;
        else
            image_speed = 0;
        //mp_potential_step_object(pioneer.x, pioneer.y, speedMax/3, Obstacle);
        move_towards_point(pioneer.x, pioneer.y, speedMax/3);
        for (i = 0; i &lt; instance_number(Children); i ++){
            child = instance_find(Children, i);
            if (!child.invis
                &amp;&amp; abs(angle_difference(point_direction(x,y,child.x, child.y), dir)) &lt; 20
                &amp;&amp; !collision_line(x,y, child.x, child.y, Obstacle, 0, 1)
                &amp;&amp; point_distance(x,y,child.x, child.y) &lt; 200){
                target = child;
                if (path_exists(path))
                    with(pioneer) path_end();
                state = "chasing";
                audio_pause_sound(soundWalk);
                audio_resume_sound(soundRun);
                
                
                yell = audio_play_sound_on(emitter, choose(sFound,sFound2,sFound3), 0, 0);
                audio_sound_gain(yell, 0.5, 1);
            }
        }
    break;
    case "chasing":
        image_speed = 1;
        if (!collision_line(x,y, target.x, target.y, Obstacle, 0, 1)){
            lastX = target.x;
            lastY = target.y;
            alarm[1] = 60;
        }
        mp_potential_step_object(lastX, lastY, speedMax, Obstacle);
    break;
    case "returning":
        mp_potential_step_object(xstart, ystart, speedMax/2, Obstacle);
        if (point_distance(x,y,xstart,ystart)&lt;5){
            state = "patrolling";
            if (path_exists(path)){
                pioneer.path = path;
                with(pioneer) path_start(path, speedMax/3, path_action_restart, 1);
            }
        }
            
    break;
}

/*guard = instance_place(x,y,Guard);
if (instance_exists(guard) &amp;&amp; state == "patrolling" &amp;&amp; path_exists(path) &amp;&amp; guard.id &gt; id){
    pathPos = path_position;
    path_end();
}else if (pathPos != -1){
    path_start(path, speedMax/3, path_action_restart, 0);
    path_position = pathPos;
    pathPos = -1;
}*/

    walkingAnimationGuard();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Children">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.storyRoom = room;
room_goto(rmRetry);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_all(point_direction(other.x, other.y, x, y), speedMax);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_free(emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, image_index, x, y);

draw_set_alpha(0.1);
for(i = 0; i &lt; 200; i++){
    if (instance_position(x+lengthdir_x(i, dir - 20), y+lengthdir_y(i, dir - 20),Obstacle))
        break;
}
draw_line_width(x,y, x+lengthdir_x(i, dir - 20), y+lengthdir_y(i, dir - 20),2);

for(i = 0; i &lt; 200; i++){
    if (instance_position(x+lengthdir_x(i, dir + 20), y+lengthdir_y(i, dir + 20),Obstacle))
        break;
}


draw_line_width(x,y, x+lengthdir_x(i, dir + 20), y+lengthdir_y(i, dir + 20),2);
//if (path_exists(path))
  // draw_path(path, x, y, 1)
draw_set_alpha(1);

if (state == "chasing")
draw_text_colour(x,y-10, "!", c_red,c_red,c_red,c_red,1);


/*dir = point_direction (0, room_height, room_width/2, room_height/2);

for (i = 0; i &lt; 6; i++){
    xx = 0 + lengthdir_x(800, dir-55+14*i);
    yy = room_height + lengthdir_y(800, dir-55+14*i);
    draw_line(0, room_height, xx, yy);
}*/
//draw_text(x,y+10, string(abs(angle_difference(point_dir(x,y,Children.x, Children.y), dir))));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
